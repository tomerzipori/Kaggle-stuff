geom_col() +
labs(x = "Show", y = "Match") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "none")
}
netflix_tf_idf@docvars$docname_
netflix_tf_idf@docvars$title
shows <-  c("Penguin Town", "I Am Sam")
features <- netflix_tf_idf@docvars
show_id <- features$docname_[tolower(features$title) %in% tolower(shows)]
show_id <- as.integer(str_remove_all(show_id, pattern = "text"))
netflix_tf_idf@x[1]
netflix_tf_idf@x[1:10]
netflix_tf_idf@x[1:10,]
netflix_tf_idf[,1]
netflix_tf_idf@x[,1]
netflix_tf_idf@x[1]
netflix_tf_idf@x
View(netflix_tf_idf)
View(netflix_tf_idf)
get_recommendation <- function(show) {
library(dplyr)
library(quanteda)
features <- netflix_tf_idf@docvars
show_id <- features$docname_[tolower(features$title) %in% tolower(show)]
show_id <- as.integer(str_remove_all(show_id, pattern = "text"))
simil_mat <- textstat_simil(netflix_tf_idf[show_id,], netflix_tf_idf, method = "cosine")
simil_df <- data.frame(shows = simil_mat@Dimnames[[2]],
simil = simil_mat@x) |>
arrange(-simil) |>
inner_join(select(netflix_tf_idf@docvars, docname_, title),
by = join_by(shows == docname_)) |>
select(-shows, match = simil) |>
mutate(match = (match-min(match))/(max(match)-min(match))) |>
head(11)
return(simil_df[-1,])
}
get_recommendation_plot <- function(show) {
library(ggplot2)
plot_df <- get_recommendation(show)
ggplot(plot_df, aes(reorder(title, -match, identity), match, fill = match)) +
geom_col() +
labs(x = "Show", y = "Match") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "none")
}
get_recommendation(watched[1])
watched <- c("Penguin Town", "I Am Sam")
get_recommendation(watched[1])
get_recommendation(watched[2])
get_recommendation(watched[2])
get_recommendation_plot(watched[2])
get_recommendation_plot(watched[1])
library(shiny)
head(data)
head(data$description)
head(data$description, 3)
data_clean_dfm <- data_clean |>
mutate(description = str_remove_all(description, pattern = "[[:punct:]]")) |>
corpus(text_field = "description") |>
tokens(remove_separators = T) |>
tokens_remove(stopwords()) |>
dfm()
data_clean_dfm
head(plot_data)
data_clean_dfm
#| output: false
library(tidyverse)
library(extrafont)
library(lubridate)
library(ggwordcloud)
library(quanteda)
library(quanteda.textplots)
library(quanteda.textstats)
data <- read_csv("netflix_titles.csv", show_col_types = F)
head(data)
head(data$description, 3)
#| output: false
months_names <- data.frame(name = month.name,
month = seq(1,12,1))
data_clean <- data |>
mutate(month_added = word(date_added, 1),
day_added = str_remove_all(word(date_added, 2), ","),
year_added = word(date_added, 3)) |>
left_join(months_names, by = join_by(month_added == name)) |>
mutate(date_added = paste(day_added, month, year_added, sep = ".")) |>
select(-month_added, -day_added, -month) |>
mutate(date_added = dmy(date_added)) |>
mutate(date_added_ym = zoo::as.yearmon(date_added))
data_clean_dfm <- data_clean |>
mutate(description = str_remove_all(description, pattern = "[[:punct:]]")) |>
corpus(text_field = "description") |>
tokens(remove_separators = T) |>
tokens_remove(stopwords()) |>
dfm()
data_clean_dfm
plot_data <- data_clean_dfm |>
textstat_frequency(groups = year_added) |>
filter(rank %in% c(1:100) & group %in% c("2016", "2017", "2017", "2019", "2020", "2021")) |>
group_by(group) |>
mutate(r_frequency = 100*frequency/sum(frequency)) |>
ungroup()
cloud1 <- plot_data |>
ggplot(aes(label = feature, size = r_frequency, color = r_frequency)) +
scale_size_area(max_size = 7) +
geom_text_wordcloud(seed = 14, ) +
scale_color_gradient(low = "#000000", high = "#ff0000") +
facet_wrap(~group, nrow = 1) +
labs(title = "Content trends in Netflix's new additions every year",
subtitle = "Most common words in the description of every newly added Movie or TV series") +
theme_minimal() +
theme(panel.background = element_blank(),
plot.background = element_blank(),
strip.text.x = element_text(size = 30, family = "Avengeance Heroic Avenger"),
plot.title = element_text(size = 32, family = "Bebas Neue", hjust = 0.5),
plot.subtitle = element_text(size = 22, family = "Bebas Neue", hjust = 0.5))
cloud1
netflix_tf_idf <- data_clean_dfm |>
dfm_tolower() |>
dfm_wordstem() |>
dfm_tfidf()
get_recommendation <- function(show) {
library(dplyr)
library(quanteda)
features <- netflix_tf_idf@docvars
show_id <- features$docname_[tolower(features$title) %in% tolower(show)]
show_id <- as.integer(str_remove_all(show_id, pattern = "text"))
simil_mat <- textstat_simil(netflix_tf_idf[show_id,], netflix_tf_idf, method = "cosine")
simil_df <- data.frame(shows = simil_mat@Dimnames[[2]],
simil = simil_mat@x) |>
arrange(-simil) |>
inner_join(select(netflix_tf_idf@docvars, docname_, title),
by = join_by(shows == docname_)) |>
select(-shows, match = simil) |>
mutate(match = (match-min(match))/(max(match)-min(match))) |>
head(11)
return(simil_df[-1,])
}
get_recommendation_plot <- function(show) {
library(ggplot2)
plot_df <- get_recommendation(show)
ggplot(plot_df, aes(reorder(title, -match, identity), match, fill = match)) +
geom_col() +
labs(x = "Show", y = "Match") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "none")
}
netflix_tf_idf@docvars$title
get_recommendation_plot("The Woman in the Window")
text_emb <- textEmbed("hello world")
library(text)
text_emb <- textEmbed("hello world")
text_emb$texts$texts
View(text_emb$texts$texts)
text_emb <- textEmbed(data_clean$description[1])
View(text_emb$texts$texts)
8*8807/60
(8*8807/60)/60
60^2
8807/3600
8*8807/3600
netflix_tf_idf@x
netflix_tf_idf
dfm_subset(netflix_tf_idf, subset = title == "I Am Sam")
netflix_tf_idf@docvars$title
dfm_subset(netflix_tf_idf, subset = title == "Attack on Titan")
View(dfm_subset(netflix_tf_idf, subset = title == "Attack on Titan"))
dfm_subset(netflix_tf_idf, subset = title == "Attack on Titan")@x
dfm_subset(netflix_tf_idf, subset = title == "Attack on Titan")@p
get_recommendation <- function(show, liked = T) {
library(dplyr)
library(quanteda)
features <- netflix_tf_idf@docvars
show_id <- features$docname_[tolower(features$title) %in% tolower(show)]
show_id <- as.integer(str_remove_all(show_id, pattern = "text"))
simil_mat <- textstat_simil(netflix_tf_idf[show_id,], netflix_tf_idf, method = "cosine")
if (liked) {
simil_df <- data.frame(shows = simil_mat@Dimnames[[2]],
simil = simil_mat@x) |>
arrange(-simil) |>
inner_join(select(netflix_tf_idf@docvars, docname_, title),
by = join_by(shows == docname_)) |>
select(-shows, match = simil) |>
mutate(match = (match-min(match))/(max(match)-min(match))) |>
head(11)
}
if (!liked){
simil_df <- data.frame(shows = simil_mat@Dimnames[[2]],
simil = simil_mat@x) |>
arrange(simil) |>
inner_join(select(netflix_tf_idf@docvars, docname_, title),
by = join_by(shows == docname_)) |>
select(-shows, match = simil) |>
mutate(match = (match-min(match))/(max(match)-min(match))) |>
head(11)
}
return(simil_df[-1,])
}
get_recommendation_plot <- function(show) {
library(ggplot2)
plot_df <- get_recommendation(show)
ggplot(plot_df, aes(reorder(title, -match, identity), match, fill = match)) +
geom_col() +
labs(x = "Show", y = "Match") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "none")
}
get_recommendation("I Am Sam", liked = FALSE)
#| output: false
library(tidyverse)
library(extrafont)
library(lubridate)
library(ggwordcloud)
library(quanteda)
library(quanteda.textplots)
library(quanteda.textstats)
data <- read_csv("netflix_titles.csv", show_col_types = F)
head(data)
head(data$description, 3)
#| output: false
months_names <- data.frame(name = month.name,
month = seq(1,12,1))
data_clean <- data |>
mutate(month_added = word(date_added, 1),
day_added = str_remove_all(word(date_added, 2), ","),
year_added = word(date_added, 3)) |>
left_join(months_names, by = join_by(month_added == name)) |>
mutate(date_added = paste(day_added, month, year_added, sep = ".")) |>
select(-month_added, -day_added, -month) |>
mutate(date_added = dmy(date_added)) |>
mutate(date_added_ym = zoo::as.yearmon(date_added))
data_clean_dfm <- data_clean |>
mutate(description = str_remove_all(description, pattern = "[[:punct:]]")) |>
corpus(text_field = "description") |>
tokens(remove_separators = T) |>
tokens_remove(stopwords()) |>
dfm()
data_clean_dfm
netflix_tf_idf <- data_clean_dfm |>
dfm_tolower() |>
dfm_wordstem() |>
dfm_tfidf()
get_recommendation <- function(show, liked = T) {
library(dplyr)
library(quanteda)
features <- netflix_tf_idf@docvars
show_id <- features$docname_[tolower(features$title) %in% tolower(show)]
show_id <- as.integer(str_remove_all(show_id, pattern = "text"))
simil_mat <- textstat_simil(netflix_tf_idf[show_id,], netflix_tf_idf, method = "cosine")
if (liked) {
simil_df <- data.frame(shows = simil_mat@Dimnames[[2]],
simil = simil_mat@x) |>
arrange(-simil) |>
inner_join(select(netflix_tf_idf@docvars, docname_, title),
by = join_by(shows == docname_)) |>
select(-shows, match = simil) |>
mutate(match = (match-min(match))/(max(match)-min(match))) |>
head(11)
}
if (!liked){
simil_df <- data.frame(shows = simil_mat@Dimnames[[2]],
simil = simil_mat@x) |>
arrange(simil) |>
inner_join(select(netflix_tf_idf@docvars, docname_, title),
by = join_by(shows == docname_)) |>
select(-shows, match = simil) |>
mutate(match = (match-min(match))/(max(match)-min(match))) |>
head(11)
}
return(simil_df[-1,])
}
get_recommendation_plot <- function(show) {
library(ggplot2)
plot_df <- get_recommendation(show)
ggplot(plot_df, aes(reorder(title, -match, identity), match, fill = match)) +
geom_col() +
labs(x = "Show", y = "Match") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "none")
}
watched <- "Attack on Titan"
get_recommendation(watched)
get_recommendation("I Am Sam", liked = FALSE)
get_recommendation <- function(show, liked = T) {
library(dplyr)
library(quanteda)
features <- netflix_tf_idf@docvars
show_id <- features$docname_[tolower(features$title) %in% tolower(show)]
show_id <- as.integer(str_remove_all(show_id, pattern = "text"))
simil_mat <- textstat_simil(netflix_tf_idf[show_id,], netflix_tf_idf, method = "cosine")
if (liked) {
simil_df <- data.frame(shows = simil_mat@Dimnames[[2]],
simil = simil_mat@x) |>
arrange(-simil) |>
inner_join(select(netflix_tf_idf@docvars, docname_, title),
by = join_by(shows == docname_)) |>
select(-shows, match = simil) |>
mutate(match = (match-min(match))/(max(match)-min(match))) |>
head(11)
}
if (!liked){
simil_df <- data.frame(shows = simil_mat@Dimnames[[2]],
simil = simil_mat@x) |>
arrange(simil) |>
inner_join(select(netflix_tf_idf@docvars, docname_, title),
by = join_by(shows == docname_)) |>
select(-shows, match = simil) |>
mutate(match = 1-(match-min(match))/(max(match)-min(match))) |>
head(11)
}
return(simil_df[-1,])
}
get_recommendation("I Am Sam", liked = FALSE)
get_recommendation_plot(watched)
get_recommendation_plot <- function(show) {
library(ggplot2)
plot_df <- get_recommendation(show)
ggplot(plot_df, aes(reorder(title, -match, identity), match, fill = match)) +
geom_col() +
labs(x = "Show", y = "Match") +
scale_fill_gradient(low = "#000000", high = "#990011FF") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "none")
}
get_recommendation_plot(watched)
library(text)
textrpp_initialize()
text_emb <- textEmbed(data_clean$description[14])
View(text_emb)
text_emb <- textEmbed(data_clean$description[1:10])
View(text_emb)
View(text_emb$texts$texts)
emb_df <- text_emb$texts$texts
text_emb <- textEmbed(data_clean$description[1:50])
emb_df <- text_emb$texts$texts
text_emb2 <- textEmbed(data_clean$description[1:50], model = "sentence-transformers/all-MiniLM-L6-v2", layers = 6)
emb_df2 <- text_emb2$texts$texts
library(parallel)
detectCores()
cl <- makeCluster(detectCores())
clusterEvalQ(cl, library(text))
clusterExport(cl, "data_clean")
stopCluster(cl)
rm(cl)
text_emb2 <- textEmbed(data_clean$description[1:4000], model = "sentence-transformers/all-MiniLM-L6-v2", layers = 6)
#| echo: false
text_emb <- read_rds("embedded_text.rds")
#| output: false
library(tidyverse)
library(extrafont)
library(lubridate)
library(ggwordcloud)
library(quanteda)
library(quanteda.textplots)
library(quanteda.textstats)
library(text)
#| echo: false
text_emb <- read_rds("embedded_text.rds")
embedded_text_df <- text_emb$texts$texts
embedded_text_df <- embedded_text_df |>
mutate(title = data_clean$title,
director = data_clean$director)
embedded_text_df[1,]
cor(embedded_text_df[1,], embedded_text_df[,-1])
text <- select(embedded_text_df, -title, -director)
v <- text[1,]
text <- select(embedded_text_df, -title, -director) |>
t()
v <- text[,1]
v
v1 <- text[,1]
v <- text[,-1]
v
View(v)
dim(v)
v1 <- text[,1]
v <- text[,2:8807]
dim(v)
v1 <- text[1,]
v1
v <- text[-1,]
cor(v1, v)
cor(v1, v[,i])
for (i in c(1:8806)) {
cor(v1, v[,i])
}
v[,1]
dim(v[,1])
dim(v)
dim(v1)
v1
v[,1]
View(text)
v1 <- text[,1]
v <- text[,-1]
View(v)
v <- text[,-"V1"]
v <- text[,2:384]
v1
View(v)
v <- text[,c(2:384)]
v <- text |>
select(-V1)
View(text)
v <- text[,-1]
View(v)
dim(v)
dim(text)
cor(v1, v)
cors <- cor(v1, v)
cors
head(sort(cors, decreasing = T))
get_recommendation_tran <- function(shows) {
watched_shows_df <- embedded_text_df |>
filter(title %in% shows) |>
select(-title, -director) |>
t()
other_shows_df <- embedded_text_df |>
filter(!(title %in% shows)) |>
select(-title, -director) |>
t()
mean_liked_show <- rowMeans(watched_shows_df)
similarities <-
return(watched_shows_df)
}
get_recommendation_tran(c("I Am Sam", "Lucifer"))
get_recommendation_tran <- function(shows) {
watched_shows_df <- embedded_text_df |>
filter(title %in% shows) |>
select(-title, -director) |>
t()
other_shows_df <- embedded_text_df |>
filter(!(title %in% shows)) |>
select(-title, -director) |>
t()
mean_liked_show <- rowMeans(watched_shows_df)
similarities <-
return(other_shows_df)
}
get_recommendation_tran(c("I Am Sam", "Lucifer"))
View(get_recommendation_tran(c("I Am Sam", "Lucifer")))
#| echo: false
text_emb <- read_rds("embedded_text.rds")
library(tidyverse)
#| echo: false
text_emb <- read_rds("embedded_text.rds")
View(text_emb$texts$texts)
dim(text_emb$texts$texts)
library(lsr)
library(ggplot2)
effect_size <- 10
std <- 4
sample_size <- seq(10, 1000, 10)
cohen_ds <- rep(NA, length(sample_size))
for (i in sample_size) {
x1 <- rnorm(n = sample_size[1], 0, std)
x2 <- rnorm(n = sample_size[1], effect_size, std)
cohen_ds[i] <- cohensD(x1, x2)
}
for (i in 1:length(sample_size)) {
x1 <- rnorm(n = sample_size[1], 0, std)
x2 <- rnorm(n = sample_size[1], effect_size, std)
cohen_ds[i] <- cohensD(x1, x2)
}
cbind(sample_size, cohen_ds)
for (i in 1:length(sample_size)) {
x1 <- rnorm(n = sample_size[i], 0, std)
x2 <- rnorm(n = sample_size[i], effect_size, std)
cohen_ds[i] <- cohensD(x1, x2)
}
cbind(sample_size, cohen_ds)
cohen_ds
cohensD(x1, x2)
sample_size <- seq(10, 1000, 10)
cohen_ds <- rep(NA, length(sample_size))
for (i in 1:length(sample_size)) {
x1 <- rnorm(n = sample_size[i], 0, std)
x2 <- rnorm(n = sample_size[i], effect_size, std)
cohen_ds[i] <- cohensD(x1, x2)
}
cohen_ds
effect_size <- 10
std <- 4
sample_size <- seq(10, 10000, 10)
cohen_ds <- rep(NA, length(sample_size))
for (i in 1:length(sample_size)) {
x1 <- rnorm(n = sample_size[i], 0, std)
x2 <- rnorm(n = sample_size[i], effect_size, std)
cohen_ds[i] <- cohensD(x1, x2)
}
cbind(sample_size, cohen_ds)
data.frame("sample_size" = sample_size, "effect_size" = cohen_ds) |>
ggplot(aes(x = sample_size, y = effect_size)) +
geom_point()
