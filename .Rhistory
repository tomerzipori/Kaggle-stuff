Defensive_Work_Rate = case_when(Defensive_Work_Rate == "Low" ~ 1,
Defensive_Work_Rate == "Medium" ~ 2,
Defensive_Work_Rate == "High" ~ 3)) %>%
select(-Known_As, -Full_Name, -Positions_Played, -Nationality, -Image_Link, -Club_Name, -Contract_Until, -Club_Jersey_Number, -National_Team_Name, -National_Team_Image_Link, -National_Team_Jersey_Number, -On_Loan) %>% # getting rid of garbage variables
mutate(across(where(is.character), ~na_if(., "-"))) # replacing all "-" with NA
players <- select(players, -National_Team_Position, -Club_Position, -Best_Position)
set.seed(14)
train_id <- createDataPartition(y = players$Overall, p = 0.7, list = F)
players_train <- players[train_id,]
players_test <- players[-train_id,]
tg <- expand.grid(alpha = c(seq(0, 1, length.out = 25)),
lambda = c(2 ^ seq(10, -10, length = 100)))
#| echo: false
#saveRDS(elastic_reg, "models/elasticnet_model.rds")
elastic_reg <- read_rds("models/elasticnet_model.rds")
elastic_reg$bestTune
plot(elastic_reg, xTrans = log, digits = 3)
elastic_reg$results[elastic_reg$results$RMSE == min(elastic_reg$results$RMSE, na.rm = T),]
#| echo: false
options(scipen = 999)
elasnet_coeffs <- coef(elastic_reg$finalModel, s = elastic_reg$bestTune$lambda)
plot(elasnet_coeffs)
round(elasnet_coeffs, 4)
elasnet_coeffs[-1,]
plot(elasnet_coeffs[-1,])
plot(elasnet_coeffs[-1,], ylab = "Coefficient")
#| output: false
library(tidyverse)
library(quanteda)
library(topicmodels)
library(quanteda.textmodels)
library(spacyr)
library(corpustools)
library(glue)
real <- read_csv("football_fake_news/real.csv", show_col_types = F)
real <- read_csv("real.csv", show_col_types = F)
fake <- read_csv("fake.csv", show_col_types = F)
real$label <- "real"
fake$label <- "fake"
View(fake)
View(real)
tweets <- rbind(real, fake)
View(tweets)
corp <- corpus(tweets, text_field = "tweet")
tweets[is.na(tweets$tweet),]
tweets <- rbind(real, fake) |>
drop_na() # dropping NA rows
corp <- corpus(tweets, text_field = "tweet")
?tokens
?dfm
data_feature_mat <- corp |>
tokens(remove_punct = T, remove_numbers = T, remove_url = T, remove_separators = T, remove_symbols = T) |>
dfm(tolower = T)
View(data_feature_mat)
data_feature_mat
data_feature_mat <- corp |>
tokens(remove_punct = T, remove_numbers = T, remove_url = T, remove_separators = T, remove_symbols = T) |>
dfm(tolower = T) |>
dfm_tfidf()
data_feature_mat
?tokens_wordstem
data_feature_mat <- corp |>
tokens(remove_punct = T, remove_numbers = T, remove_url = T, remove_separators = T, remove_symbols = T) |>
tokens_wordstem() |>
dfm(tolower = T) |>
dfm_tfidf()
data_feature_mat
data_feature_mat <- corp |>
tokens(remove_punct = T, remove_numbers = T, remove_url = T, remove_separators = T, remove_symbols = T) |>
#tokens_wordstem() |>
dfm(tolower = T) |>
dfm_tfidf()
data_feature_mat
data_feature_mat <- corp |>
tokens(remove_punct = T, remove_numbers = T, remove_url = T, remove_separators = T, remove_symbols = T) |>
tokens_wordstem() |>
dfm(tolower = T) |>
dfm_tfidf()
data_feature_mat
View(tweets)
View(tweets)
tweets <- rbind(real, fake) |>
drop_na() |> # dropping NA rows
mutate(tweet = str_trim(tweet) |> str_squish()) # removing white-spaces in the start and beginning of tweet, and between words
corp <- corpus(tweets, text_field = "tweet")
data_feature_mat <- corp |>
tokens(remove_punct = T, remove_numbers = T, remove_url = T, remove_separators = T, remove_symbols = T) |>
tokens_wordstem() |>
dfm(tolower = T) |>
dfm_tfidf()
data_feature_mat
length(data_feature_mat)
nrow(data_feature_mat)
set.seed(14)
train_data <- dfm_sample(data_feature_mat, size = 0.8 * nrow(data_feature_mat))
test_data <- data_feature_mat[setdiff(docnames(data_feature_mat), docnames(train_data)),]
nb_model <- textmodel_nb(train_data, y = docvars(train_data, "label"))
pred_nb <- predict(nb_model, newdata = test_data)
(conmat_nb <- table(pred_nb, docvars(test_data, "label")))
caret::confusionMatrix(conmat_nb, mode = "everything", positive = "TRUE")
caret::confusionMatrix(conmat_nb, mode = "everything", positive = "real")
lr_model <- textmodel_lr(x = train_data, y = docvars(train_dtm, "label"))
lr_model <- textmodel_lr(x = train_data, y = docvars(train_data, "label"))
pred_lr <- predict(lr_model, newdata = test_data)
(conmat_lt <- table(pred_lr, docvars(test_data, "label")))
caret::confusionMatrix(conmat_lt, mode = "everything", positive = "real")
#| out-width: 200%
lr_summary <- summary(lr_model) # summarizing the model
coefs <- data.frame(lr_summary$estimated.feature.scores) # extracting coefficients
col_vec <- c("#7952B3", "#F5F5F5")
View(coefs)
#| out-width: 200%
lr_summary <- summary(lr_model) # summarizing the model
coefs <- data.frame(lr_summary$estimated.feature.scores) # extracting coefficients
col_vec <- c("#7952B3", "#F5F5F5")
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
?geom_hline
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = col_vec[1], show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = col_vec[1], linetype = 2, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(aes(size = 3), yintercept = 0, color = col_vec[1], linetype = 2, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = col_vec[1], linetype = 2, size = 3, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = col_vec[1], linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#6C0BA9", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 5),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 10),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient)) +
geom_point(color = col_vec[1]) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[1]),
axis.title = element_text(color = col_vec[1]),
axis.text = element_text(color = col_vec[1]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12, face = "bold"),
plot.title = element_text(size = 16, color = col_vec[1], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)")# |>
col_vec <- c("#e63946", "#f1faee", "#a8dadc", "black")
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
mutate(bigger_then_0 = Coefficient > 0) |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient, fill = bigger_then_0)) +
geom_point() +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[4]),
axis.title = element_text(color = col_vec[4]),
axis.text = element_text(color = col_vec[4]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12, face = "bold"),
plot.title = element_text(size = 16, color = col_vec[4], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
mutate(bigger_then_0 = Coefficient > 0) |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient, color = bigger_then_0)) +
geom_point() +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[4]),
axis.title = element_text(color = col_vec[4]),
axis.text = element_text(color = col_vec[4]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12, face = "bold"),
plot.title = element_text(size = 16, color = col_vec[4], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
mutate(bigger_then_0 = Coefficient > 0) |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient, color = bigger_then_0)) +
geom_point() +
scale_color_manual(values = c(col_vec[1], col_vec[2])) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[4]),
axis.title = element_text(color = col_vec[4]),
axis.text = element_text(color = col_vec[4]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12, face = "bold"),
plot.title = element_text(size = 16, color = col_vec[4], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
mutate(bigger_then_0 = Coefficient > 0) |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient, color = bigger_then_0)) +
geom_point() +
scale_color_manual(values = c(col_vec[3], col_vec[1])) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[4]),
axis.title = element_text(color = col_vec[4]),
axis.text = element_text(color = col_vec[4]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12, face = "bold"),
plot.title = element_text(size = 16, color = col_vec[4], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
mutate(bigger_then_0 = Coefficient > 0) |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient, color = bigger_then_0)) +
geom_point() +
scale_color_manual(values = c(col_vec[1], col_vec[3])) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[4]),
axis.title = element_text(color = col_vec[4]),
axis.text = element_text(color = col_vec[4]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12, face = "bold"),
legend.position = "none",
plot.title = element_text(size = 16, color = col_vec[4], hjust = .5, family = "serif", face = "bold"))
#| out-width: 200%
lr_summary <- summary(lr_model) # summarizing the model
coefs <- data.frame(lr_summary$estimated.feature.scores) # extracting coefficients
col_vec <- c("#fc7753", "#f2efea", "#66d7d1", "black")
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
mutate(bigger_then_0 = Coefficient > 0) |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient, color = bigger_then_0)) +
geom_point() +
scale_color_manual(values = c(col_vec[1], col_vec[3])) +
scale_y_continuous(n.breaks = 10) +
ggtitle("Most important words for classifying if a tweet is fake news") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[4]),
axis.title = element_text(color = col_vec[4]),
axis.text = element_text(color = col_vec[4]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12, face = "bold"),
legend.position = "none",
plot.title = element_text(size = 16, color = col_vec[4], hjust = .5, family = "serif", face = "bold"))
coefs |>
# preparing df for plot
rownames_to_column(var = "Token") |>
rename(Coefficient = real) |>
filter(Coefficient != 0 & Token != "(Intercept)") |>
mutate(bigger_then_0 = Coefficient > 0) |>
# ggplotting
ggplot(aes(x = Token, y = Coefficient, color = bigger_then_0)) +
geom_point() +
scale_color_manual(values = c(col_vec[1], col_vec[3])) +
scale_y_continuous(n.breaks = 10) +
labs(title = "Most important words for classifying if a tweet is fake news",
x = "") +
theme_classic() +
geom_hline(yintercept = 0, color = "#51087E", linetype = 2, size = 1, show.legend = F) +
theme(plot.background = element_rect(color = col_vec[2], fill = col_vec[2]),
panel.background = element_rect(color = col_vec[2], fill = col_vec[2]),
axis.line = element_line(color = col_vec[4]),
axis.title = element_text(color = col_vec[4]),
axis.text = element_text(color = col_vec[4]),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12, face = "bold"),
legend.position = "none",
plot.title = element_text(size = 16, color = col_vec[4], hjust = .5, family = "serif", face = "bold"))
