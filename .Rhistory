plot(elastic_reg, xTrans = log, digits = 3)
#| output: false
library(tidyverse) # For data-wrangling, pre-processing and plotting with ggplot2
library(caret)     # For model training, tuning and evaluating
library(gbm)       # For fitting XGBoost models
library(glue)      # Helper package for nice-looking output
players <- read_csv("Fifa_23_Players_Data.csv")
glimpse(players)
names(players) <- str_replace_all(names(players), pattern = " ", replacement = "_")
names(select(players, where(is.character)))
players <- players %>%
mutate(Attacking_Work_Rate = case_when(Attacking_Work_Rate == "Low" ~ 1,
Attacking_Work_Rate == "Medium" ~ 2,
Attacking_Work_Rate == "High" ~ 3),
Defensive_Work_Rate = case_when(Defensive_Work_Rate == "Low" ~ 1,
Defensive_Work_Rate == "Medium" ~ 2,
Defensive_Work_Rate == "High" ~ 3)) %>%
select(-Known_As, -Full_Name, -Positions_Played, -Nationality, -Image_Link, -Club_Name, -Contract_Until, -Club_Jersey_Number, -National_Team_Name, -National_Team_Image_Link, -National_Team_Jersey_Number, -On_Loan) %>% # getting rid of garbage variables
mutate(across(where(is.character), ~na_if(., "-"))) # replacing all "-" with NA
players <- select(players, -National_Team_Position, -Club_Position, -Best_Position)
set.seed(14)
train_id <- createDataPartition(y = players$Overall, p = 0.7, list = F)
players_train <- players[train_id,]
players_test <- players[-train_id,]
tg <- expand.grid(alpha = c(seq(0, 1, length.out = 25)),
lambda = c(2 ^ seq(10, -10, length = 100)))
#| echo: false
#saveRDS(elastic_reg, "models/elasticnet_model.rds")
elastic_reg <- read_rds("models/elasticnet_model.rds")
elastic_reg$bestTune
plot(elastic_reg, xTrans = log, digits = 3)
elastic_reg$results[elastic_reg$results$RMSE == min(elastic_reg$results$RMSE, na.rm = T),]
#| echo: false
options(scipen = 999)
elasnet_coeffs <- coef(elastic_reg$finalModel, s = elastic_reg$bestTune$lambda)
plot(elasnet_coeffs)
round(elasnet_coeffs, 4)
elasnet_coeffs[-1,]
plot(elasnet_coeffs[-1,])
plot(elasnet_coeffs[-1,], ylab = "Coefficient")
